// src/whatsapp/whatsapp.service.ts
import { Injectable, OnModuleInit } from '@nestjs/common';
import { ComplaintService } from 'src/complaint/complaint.service';
const venom = require('venom-bot');

interface UserState {
    step: number;
}

@Injectable()
export class ChatbotService implements OnModuleInit {
    constructor(private readonly complaintService: ComplaintService) {}
    private userStates: Record<string, UserState> = {};

    async onModuleInit() {
        venom
            .create({
                session: 'conecta-recife',
                headless: false,
                browserArgs: ['--disable-gpu'],
                useChrome: true,
                executablePath: 'C:/Program Files/Google/Chrome/Application/chrome.exe'
            })
            .then((client) => this.start(client))
            .catch((erro) => console.log(erro));
    }

    private async start(client: any) {
        client.onMessage(async (message: any) => {
            if (message.isGroupMsg) return;

            const userId = message.from;
            const messageType = message.type;
            const msg = message.body.toLowerCase();

            if (!this.userStates[userId]) {
                this.userStates[userId] = { step: 0 };
            }

            const user = this.userStates[userId];

            if (user.step === 0) {
                const cadastrado = await this.checkRegister(userId);
                if (!cadastrado) { //nao tiver cadastrado
                    await client.sendText(userId, `Ol√°! Voc√™ n√£o est√° cadastrado no Conecta Recife. 
          Visite www.google.com.br para se conectar ao servi√ßo, e falo comigo novamente! :)`);
                    user.step = 0;
                    return;
                }
                await client.sendText(userId,
                    `Bem-vindo(a)! Esse √© o nosso sistema de atendimento do ReColhe.
Confira as op√ß√µes abaixo e escolha a que melhor atende √† sua necessidade:
1Ô∏è‚É£ Denunciar descarte irregular de res√≠duos
2Ô∏è‚É£ Encontrar pontos de descarte recicl√°vel pr√≥ximo
3Ô∏è‚É£ Verificar saldo
4Ô∏è‚É£ D√∫vidas`);
                user.step = 1;
                return;
            }

            if (user.step === 1) {
                if (msg.includes('1') || msg.includes('denunciar') || msg.includes('denuncia') || msg.includes('descarte')) {
                    await client.sendText(
                        userId,
                        `Para registrar sua den√∫ncia, precisamos da localiza√ß√£o exata do descarte irregular. Voc√™ pode nos enviar sua localiza√ß√£o atual pelo whatsapp.
                Caso deseje voltar ao menu digite 0.`
                    );
                    user.step = 5;
                    return
                } else if (msg.includes('0')) {
                    await this.backToMenu(client, userId, user);
                }
                else {
                    await client.sendText(userId, `Opera√ß√£o inv√°lida. Digite 1 para continuar a den√∫ncia ou 0 para voltar ao menu.`);
                    user.step = 1;
                }
                return;
            }

            if (user.step === 2) {
                if (messageType === 'location') {
                    const { lat, lng } = message;

                    await client.sendText(userId, `üìç Localiza√ß√£o recebida. Coordenadas de ${lat} (latitude) e ${lng} (longitude).
            Para prosseguir com a den√∫ncia, por favor, nos envie uma foto do local com descarte irregular.`);
                    user.step = 7;
                } else if (msg.includes('0') && messageType !== 'location') {
                    await this.backToMenu(client, userId, user);
                    return;
                }
                else {
                    await client.sendText(userId, '‚õî Voc√™ n√£o enviou a localiza√ß√£o! Tente novamente ou digite 0 para voltar ao menu.');
                    user.step = 2;
                    return;
                }
            }

            if (user.step === 3) {
                await client.sendText(userId, `Parab√©ns, atualmente voc√™ possui 150 capibas. Quer aproveitar melhor os diversos benef√≠cios obtidos pelo capiba? Se informe melhor no site www.conectarecife.com/capiba`);
                user.step = 0;
                return;
            }

            if (user.step === 4) {
                await client.sendText(userId, `Para informa√ß√µes diversas, acesse nosso site: www.conectarecife.com.br/recolhe`);
                user.step = 0;
                return;
            }

            if (user.step === 5) {
                if (messageType === 'location') {
                    const { lat, lng } = message;

                    await client.sendText(userId, `üìç Localiza√ß√£o recebida. Coordenadas de ${lat} (latitude) e ${lng} (longitude).
            Para prosseguir com a den√∫ncia, por favor, nos envie uma foto do local com descarte irregular.`);
                    user.step = 6;
                } else if (msg.includes('0') && messageType !== 'location') {
                    await this.backToMenu(client, userId, user);
                    user.step = 0;
                    return;
                }
                else {
                    await client.sendText(userId, 'Voc√™ n√£o enviou a localiza√ß√£o! ‚õî, tente novamente ou digite 0 para voltar ao menu!');
                    user.step = 2;
                    return;
                }
                user.step = 6;
                return;
            }

            if (user.step === 6) {
                if (messageType === 'image') {
                    await client.sendText(userId, 'üì∏ Processando imagem...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    const imageBase64 = message.body;
                    const mimetype = message.mimetype;
                    await client.sendText(userId, `üì∏ Imagem recebida com sucesso! Agradecemos sua colabora√ß√£o. Saiba que sua den√∫ncia foi registrada com sucesso. Voc√™ receber√° notifica√ß√µes sobre o andamento.
            Voc√™ ser√° redirecionado ao menu, obrigado.`);
                    await this.backToMenu(client, userId, user);
                    user.step = 0;
                    return;
                } else if (msg.includes('0') && messageType !== 'image') {
                    await this.backToMenu(client, userId, user);
                    user.step = 0;
                    return;
                }
                else {
                    await client.sendText(userId, 'Voc√™ n√£o enviou uma imagem v√°lida! ‚õî, tente novamente ou digite 0 para voltar ao menu!');
                    user.step = 6;
                    return;
                }
            }

            if (user.step === 7) {
                await client.sendText(userId, 'Procurando local mais pr√≥ximo... üìç');
                await new Promise(resolve => setTimeout(resolve, 2000));
                await client.sendText(userId, `Centro de Artes e Comunica√ß√£o da federal! üìç`);
                await new Promise(resolve => setTimeout(resolve, 1500));
                await this.backToMenu(client, userId, user);
            }
        });
    }

    private async backToMenu(client: any, userId: string, user: UserState) {
        await client.sendText(userId,
            `Bem-vindo(a)! Esse √© o nosso sistema de atendimento do ReColhe.
Confira as op√ß√µes abaixo e escolha a que melhor atende √† sua necessidade:
1Ô∏è‚É£ Denunciar descarte irregular de res√≠duos
2Ô∏è‚É£ Encontrar pontos de descarte recicl√°vel pr√≥ximo
3Ô∏è‚É£ Verificar saldo
4Ô∏è‚É£ D√∫vidas`
        );
        user.step = 0;
    }

    private async checkRegister(userId: string): Promise<boolean> {
        // Aqui voc√™ vai futuramente consultar banco de dados ou API
        // Por enquanto, vamos simular:
        return userId.endsWith('@c.us'); // Apenas para simular verdadeiro
    }
}
