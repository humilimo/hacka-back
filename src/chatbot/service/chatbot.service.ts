// src/whatsapp/whatsapp.service.ts
import { Injectable, OnModuleInit } from '@nestjs/common';
const venom = require('venom-bot');

interface UserState {
  step: number;
}

@Injectable()
export class ChatbotService implements OnModuleInit {
  private userStates: Record<string, UserState> = {};

  async onModuleInit() {
    venom
      .create({
        session: 'conecta-recife',
        headless: false,
        browserArgs: ['--disable-gpu'],
        useChrome: true,
        executablePath: 'C:/Program Files/Google/Chrome/Application/chrome.exe'
      })
      .then((client) => this.start(client))
      .catch((erro) => console.log(erro));
  }

  private async start(client: any) {
    client.onMessage(async (message: any) => {
      if (message.isGroupMsg) return;

      const userId = message.from;
      const msg = message.body.toLowerCase();

      if (!this.userStates[userId]) {
        this.userStates[userId] = { step: 0 };
      }

      const user = this.userStates[userId];

      if (user.step === 0) {
        const cadastrado = await this.verificarCadastro(userId);
        if (!cadastrado) { //nao tiver cadastrado
          await client.sendText(userId, `Ol√°! Voc√™ n√£o est√° cadastrado no Conecta Recife. 
          Visite www.google.com.br para se conectar ao servi√ßo, e falo comigo novamente! :)`);
          user.step = 0;
          return;
        }
        await client.sendText(userId, 
`Bem-vindo(a)! Esse √© o nosso sistema de atendimento do ReColhe.
Confira as op√ß√µes abaixo e escolha a que melhor atende √† sua necessidade:
1Ô∏è‚É£ Denunciar descarte irregular de res√≠duos
2Ô∏è‚É£ Encontrar pontos de descarte recicl√°vel pr√≥ximo
3Ô∏è‚É£ Verificar saldo
4Ô∏è‚É£ D√∫vidas`);
        user.step = 1;
        return;
      }

      if (user.step === 1) {
        if (msg.includes('1') || msg.includes('denunciar') || msg.includes('denuncia') || msg.includes('descarte')) {
            await client.sendText(
                userId,
                `Para registrar sua den√∫ncia, precisamos da localiza√ß√£o exata do descarte irregular. Voc√™ pode nos enviar sua localiza√ß√£o atual pelo whatsapp.
                üìç`
              );
              await new Promise(resolve => setTimeout(resolve, 4000));
              if (message.type === 'location') {
                const latitude = message.lat;
                const longitude = message.lng;
              
                await client.sendText(userId, `üìç Localiza√ß√£o recebida. 
                Para prosseguir com a den√∫ncia, por favor, nos envie uma foto local de descarte irregular.`);
                if (message.type === 'image') {
                    await client.sendText(userId, 'üì∏ Imagem recebida com sucesso! Voc√™ ser√° redirecionado ao menu, obrigado.');
                } else {
                    await client.sendText(
                        userId,
                        `Voc√™ n√£o enviou a localiza√ß√£o. Tente novamente.`
                      );
                    user.step = 0
                  }
                return;
              } else {
                await client.sendText(
                    userId,
                    `Voc√™ n√£o enviou a localiza√ß√£o. Tente novamente.`
                  );
                user.step = 0
              }
        }
        return;
      }

    //   if (user.step === 2) {
    //     await new Promise(resolve => setTimeout(resolve, 2000));
    //     if (msg.includes('desafios mensais') || msg.includes('1')) {
    //       await client.sendText(userId,
    //         'Quer ver os Desafios Mensais que est√£o dando o dobro de capibas?\n\n' +
    //         'üóì *Tarefas Mensais* \nüí∞ Capibas em dobro üí∞\n\n' +
    //         '‚úÖ Participar de aulas no Compaz / Academia Recife\nüëâ *Meta:* 2x por semana!\n\n' +
    //         '‚úÖ Doar sangue nas campanhas apoiadas pelo Conecta Recife\nüëâ Salvar vidas t√° na lista! ü©∏\n\n' +
    //         '‚úÖ Fazer atualiza√ß√£o da carteira vacinal\nüëâ Sa√∫de em dia, bora l√°! üíâ\n\n' +
    //         '‚úÖ Adotar um Pet usando Adota Pet do Conecta Recife\nüëâ Novo amigo de quatro patas esperando! üê∂üê±\n\n' +
    //         '‚úÖ Levar seu pet para castra√ß√£o ou atualiza√ß√£o da carteira vacinal\nüëâ Cuidar da sa√∫de do bichinho tamb√©m √© amor! üêæ'
    //       );
    //       await new Promise(resolve => setTimeout(resolve, 3000));
    //       await this.voltarAoMenuPrincipal(client, userId, user);
    //     } else if (msg.includes('validar') || msg.includes('2')) {
    //       await client.sendText(userId, 'Que bom que voc√™ cumpriu um desafio!\n\nEscolha uma das categorias:\n\n1Ô∏è‚É£ ü¶Å *Animais*\n2Ô∏è‚É£ üìù *Cidadania*\n3Ô∏è‚É£ üö≤ *Mobilidade*\n4Ô∏è‚É£ üíö *Sa√∫de e bem estar*\n5Ô∏è‚É£ üå≥ *Meio ambiente*');
    //       user.step = 3;
    //     } else if (msg.includes('saldo') || msg.includes('3')) {
    //       await client.sendText(userId, 'üåê Veja seu saldo aqui no seu Conecta Recife!\nüëâ https://conecta.recife.pe.gov.br');
    //       await new Promise(resolve => setTimeout(resolve, 2500));
    //       await this.voltarAoMenuPrincipal(client, userId, user);
    //     } else if (msg.includes('moeda capiba') || msg.includes('4')) {
    //       await client.sendText(userId, 'A moeda *Capiba* √© um incentivo digital oferecido pelo Conecta Recife. Voc√™ pode acumular Capibas ao participar de desafios e troc√°-los por benef√≠cios!\nüåê Saiba mais: https://conecta.recife.pe.gov.br/servico/949');
    //       await new Promise(resolve => setTimeout(resolve, 2500));
    //       await this.voltarAoMenuPrincipal(client, userId, user);
    //     } else {
    //       await client.sendText(userId, 'N√£o entendi! Escolha uma das op√ß√µes:\n\n1Ô∏è‚É£ *Desafios Mensais*\n2Ô∏è‚É£ *Validar meu desafio*\n3Ô∏è‚É£ *Saldo de Capibas*\n4Ô∏è‚É£ *O que √© a moeda Capiba?*');
    //     }
    //     return;
    //   }

    //   if (user.step === 3) {
    //     await client.sendText(userId, '‚úÖ Para validarmos sua atividade, envie o Documento de Valida√ß√£o em formato de foto üì∏ ou PDF üìÑ.');
    //     user.step = 4;
    //     return;
    //   }

    //   if (user.step === 4) {
    //     await client.sendText(userId, 'Estamos validando essa informa√ß√£o... üë®‚Äçüíª');
    //     await new Promise(resolve => setTimeout(resolve, 6000));

    //     if (message.mimetype && message.mimetype.startsWith('image')) {
    //       await client.sendText(userId, '‚úÖ Parab√©ns! Sua informa√ß√£o foi validada!\n\nVoc√™ ganhou mais *10 moedas capibas* ü™ô!');
    //       await new Promise(resolve => setTimeout(resolve, 2500));
    //       await client.sendText(userId, 'üåê Veja aqui o seu Conecta Recife!\nüëâ https://conecta.recife.pe.gov.br');
    //     } else {
    //       await client.sendText(userId, 'Voc√™ n√£o mandou um Documento v√°lido! ‚õî, tente novamente!');
    //       user.step = 3;
    //     }
    //     await new Promise(resolve => setTimeout(resolve, 2500));
    //     await this.voltarAoMenuPrincipal(client, userId, user);
    //   }
    });
  }

  private async voltarAoMenuPrincipal(client: any, userId: string, user: UserState) {
    await client.sendText(userId, `Bem-vindo(a)! Esse √© o nosso sistema de atendimento do ReColhe.
    Confira as op√ß√µes abaixo e escolha a que melhor atende √† sua necessidade:
    1Ô∏è‚É£ Denunciar descarte irregular de res√≠duos
    2Ô∏è‚É£ Encontrar pontos de descarte recicl√°vel pr√≥ximo
    3Ô∏è‚É£ Verificar saldo
    4Ô∏è‚É£ D√∫vidas`);
    user.step = 2;
  }

  private async verificarCadastro(userId: string): Promise<boolean> {
    // Aqui voc√™ vai futuramente consultar banco de dados ou API
    // Por enquanto, vamos simular:
    return userId.endsWith('@c.us'); // Apenas para simular verdadeiro
  }
}
